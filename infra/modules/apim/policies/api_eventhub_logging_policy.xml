<policies>
    <inbound>
        <base/>
        <set-backend-service backend-id="openai-backend" />
        <!-- <set-header name="api-key" exists-action="override">
            <value>{{openai-apikey}}</value>
        </set-header> -->
        <authentication-managed-identity resource="https://cognitiveservices.azure.com" client-id='{{apim-mi-clientId}}' output-token-variable-name="accessToken" ignore-error="false" /> <!--Application (client) ID of Managed Identity-->
         <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["accessToken"])</value>
        </set-header>
       <set-variable name="requestBody" value="@(context.Request.Body.As<string>(preserveContent: true))" />
    </inbound>
    <backend>
        <base/>
    </backend>
    <outbound>
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <log-to-eventhub logger-id="OpenAILogger">@{
                var responseBody = context.Response.Body?.As<string>(true);
                var requestBody = (string)context.Variables["requestBody"];                
                return new JObject(
                    new JProperty("eventTime", DateTime.UtcNow), 
                    new JProperty("apiOperation", context.Variables.ContainsKey("apiOperation") ? (string)context.Variables["apiOperation"] : string.Empty),
                    new JProperty("appSubscriptionKey", context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key",string.Empty)),                     
                    new JProperty("request", requestBody),
                    new JProperty("response",responseBody )
                ).ToString();
        }</log-to-eventhub>
            </when>
        </choose>
        <base />
    </outbound>
    <on-error>
        <base/>
    </on-error>
</policies>